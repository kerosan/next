type User {
    id: Int
    email: String
    name: String
    phone: String
    addressId: Int
    address: Address
    deviceId: Int
    device: Device
    balance: Float
  }

type UserPageResult {
    list: [User!]!
    total: Int!
}

input CreateUserInput {
    email: String
    name: String
    phone: String
    address: String
    # device: String
}

input UpdateUserInput {
    email: String
    name: String
    phone: String
    address: String
    # device: String
}

type Address {
    id: Int
    address: String
}

type AddressPageResult {
    list: [Address!]!
    total: Int!
}

input CreateAddressInput {
    address: String!
}

input UpdateAddressInput {
    id: Int!
    address: String!
}

type Device {
    id: Int
    name: String
    initialValue: Float
    startDate: DateTime!
    endDate: DateTime
}

type DevicePageResult {
    list: [Device!]!
    total: Int!
}

input CreateDeviceInput {
    name: String
    initialValue: Float
    startDate: DateTime!
    endDate: DateTime
}

input UpdateDeviceInput {
    id: Int
    name: String
    initialValue: Float
    startDate: DateTime!
    endDate: DateTime
}

type Query {
    users(take: Int!, skip: Int!): UserPageResult
    address(take: Int!, skip: Int!): AddressPageResult
    device(take: Int!, skip: Int!): DevicePageResult
    searchAddress(text: String): [Address]!
}

type Mutation {
  createUser(user: CreateUserInput): User
  updateUser(user: UpdateUserInput): User
  deleteUser(userId: Int): Int
  
  createAddress(address: CreateAddressInput!): Address
  updateAddress(address: UpdateAddressInput!): Address
  deleteAddress(addressId: Int): Int
  
  createDevice(device: CreateDeviceInput!): Device
  updateDevice(device: UpdateDeviceInput!): Device
  deleteDevice(deviceId: Int): Int
}

scalar DateTime